@namespace FluentUI.Demo.Shared.Components

<FluentTreeItem InitiallyExpanded="false">
    <FluentLabel slot="start" Weight="FontWeight.Bold" Style="width: 200px;">
        @Property.Item.Name
    </FluentLabel>

    @if (Property.Item.IsSimpleType())
    {
        <div slot="end" style="display: flex;">
            <FluentTextField Placeholder="@Property.FullName"
                             @bind-Value="@ItemAsString" />

            @if (!string.IsNullOrEmpty(Property.Summary))
            {
                <FluentTooltip Anchor="@($"info-{Property.Id}")">
                    @Property.Summary
                </FluentTooltip>
                <FluentIcon Style="margin-left: 10px;"
                            Id="@($"info-{Property.Id}")"
                            Value="@(new Icons.Filled.Size16.Info())" />
            }
        </div>
    }
    else
    {
        <FluentLabel slot="item" Style="@($"font-size: small; margin-left: {35 + Property.Level * 20}px;")">
            @Property.Summary
        </FluentLabel>
    }

    @if (Property.Children != null)
    {
        @foreach (var property in Property.Children)
        {
            <ApiComplexClassItem Property="@property" Item="@Item" OnChanged="@(e => OnChanged.InvokeAsync(property))" />
        }
    }
</FluentTreeItem>